model {

    # Means for drift coefs
        b.drift.delay.mu  ~ dunif(-5,5) 
        b.drift.amount.mu ~ dunif(-5,5)
        
    # Precisions for drift coefs
        b.drift.delay.pr  ~ dgamma(1, 0.5)
        b.drift.amount.pr ~ dgamma(1, 0.5)
        
   	# Means for DDM parameters
        noise.mu      ~ dunif(0.001, 2)
        #noise.mu ~ dnorm(0, 1)T(0.001, 2) 
        nondectime.mu ~ dunif(0, 10)
        #nondectime.mu ~ dnorm(0, 1)T(0.001, 5) 
        
  	# Precision for DDM parameters
        noise.pr ~ dgamma(1, 0.1)
        nondectime.pr ~ dgamma(1, 1)

    # Error term for the drift
        e.sG <- pow(e.m,2) / pow(e.d,2)
        e.rG <- e.m / pow(e.d,2)
        e.m ~ dgamma(1,0.2)T(0.001,20)
        e.d ~ dgamma(1,0.5)T(0.001,20)

    # Bias of the DDM
        bias.alpha <- bias.mu * bias.kappa
        bias.beta <- (1 - bias.mu) * bias.kappa
        bias.mu    ~ dbeta(2, 2)T(0.01,0.99)
        bias.kappa ~ dgamma(1, 0.5)


    for (p in 1:N) { # subject level

        b.drift.delay.p[p] ~ dnorm(b.drift.delay.mu, b.drift.delay.pr)
        b.drift.amount.p[p] ~ dnorm(b.drift.amount.mu, b.drift.amount.pr)
        noise.p[p] ~ dnorm(noise.mu, noise.pr)
        nondectime.p[p] ~ dnorm(nondectime.mu, nondectime.pr) #T(0.001, 10)
        drift.pr.p[p] ~ dgamma(e.sG, e.rG)T(0.001,20)
        bias.p[p] ~ dbeta(bias.alpha, bias.beta)T(0.01,0.99)

    }

    for (i in 1:M) { # trial level

        ## WIENER model, fixing the threshold to 2 and estimating the noise
        RT.signed[i] ~ dwieners(2, nondectime[i], bias[i], drift[i], noise[i]) 

        # generate predictions
        RT.signed_pred[i] ~ dwieners(2, nondectime[i], bias[i], drift[i], noise[i]) 

        # generate trial-by-trial parameters
        bias[i] <- bias.p[instance[i]]
        noise[i] <- noise.p[instance[i]]
        nondectime[i] <- nondectime.p[instance[i]]
        drift[i] ~ dnorm(drift.mu[i], drift.pr.p[instance[i]])
        drift.mu[i] <- b.drift.delay.p[instance[i]] * delay_diff[i] + b.drift.amount.p[instance[i]] * amount_diff[i]

    }
}

